// Concept generation service using AI
import { OpenRouterService } from './openRouterService';
import { Concept } from '../../UI/types/types';
import { DemographicSelectionData } from '@/features/AudienceDemographicData/types/types';
import { isOpenRouterConfigured } from '../config/openRouterConfig';

export interface ConceptGenerationOptions {
  fallbackToMock?: boolean;
}

export interface AIConceptResponse {
  title: string;
  description: string;
  keyMessage: string;
  category: string;
  visualElements: string[];
  callToAction: string;
  estimatedReach: number;
  estimatedEngagement: number;
}

export class ConceptGenerationService {
  private openRouterService: OpenRouterService | null;
  private fallbackToMock: boolean;
  private isConfigured: boolean;

  constructor(options: ConceptGenerationOptions = {}) {
    this.isConfigured = isOpenRouterConfigured();
    this.fallbackToMock = options.fallbackToMock ?? true;

    if (this.isConfigured) {
      this.openRouterService = new OpenRouterService();
    } else {
      this.openRouterService = null;
    }
  }

  async generateConcept(
    audienceData: DemographicSelectionData
  ): Promise<Concept> {
    // Check if OpenRouter is configured and available
    if (this.isConfigured && this.openRouterService) {
      try {
        // Try to generate concept using AI
        const aiResponse =
          await this.openRouterService.generateConcept(audienceData);

        // Parse the AI response
        const conceptData = this.parseAIResponse(aiResponse);

        // Create concept object
        const concept: Concept = {
          id: `concept-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
          title: conceptData.title,
          description: conceptData.description,
          category: conceptData.category,
          targetAudience: this.generateTargetAudienceDescription(audienceData),
          keyMessage: conceptData.keyMessage,
          visualElements: conceptData.visualElements,
          callToAction: conceptData.callToAction,
          estimatedReach: conceptData.estimatedReach,
          estimatedEngagement: conceptData.estimatedEngagement,
          createdAt: new Date(),
        };

        return concept;
      } catch (error) {
        console.error('AI concept generation failed:', error);

        if (this.fallbackToMock) {
          console.log('Falling back to mock concept generation');
          return this.generateMockConcept(audienceData);
        }

        throw error;
      }
    } else {
      // OpenRouter not configured, use mock generation
      console.log('OpenRouter not configured, using mock concept generation');
      return this.generateMockConcept(audienceData);
    }
  }

  private parseAIResponse(response: string): AIConceptResponse {
    try {
      // Clean the response - remove any markdown formatting or extra text
      let cleanResponse = response.trim();

      // Remove markdown code blocks if present
      if (cleanResponse.startsWith('```json')) {
        cleanResponse = cleanResponse
          .replace(/^```json\s*/, '')
          .replace(/\s*```$/, '');
      } else if (cleanResponse.startsWith('```')) {
        cleanResponse = cleanResponse
          .replace(/^```\s*/, '')
          .replace(/\s*```$/, '');
      }

      // Try to extract JSON from the response
      const jsonMatch = cleanResponse.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        cleanResponse = jsonMatch[0];
      }

      const parsed = JSON.parse(cleanResponse);

      // Validate required fields
      if (!parsed.title || !parsed.description || !parsed.keyMessage) {
        throw new Error('AI response missing required fields');
      }

      // Ensure all required fields are present with defaults
      return {
        title: parsed.title || 'AI Generated Concept',
        description:
          parsed.description ||
          'A creative advertising concept generated by AI',
        keyMessage: parsed.keyMessage || 'Experience the difference',
        category: parsed.category || 'Brand Awareness',
        visualElements: Array.isArray(parsed.visualElements)
          ? parsed.visualElements
          : ['Professional imagery', 'Clear messaging', 'Brand elements'],
        callToAction: parsed.callToAction || 'Learn More',
        estimatedReach:
          typeof parsed.estimatedReach === 'number'
            ? parsed.estimatedReach
            : 15000,
        estimatedEngagement:
          typeof parsed.estimatedEngagement === 'number'
            ? parsed.estimatedEngagement
            : 12,
      };
    } catch (error) {
      console.error('Failed to parse AI response:', error);
      throw new Error('Invalid AI response format');
    }
  }

  private generateTargetAudienceDescription(
    audienceData: DemographicSelectionData
  ): string {
    return `${audienceData.age} ${audienceData.profession}s in ${audienceData.location} with ${audienceData.income} income and ${audienceData.education} education, interested in ${audienceData.interests.join(', ')}`;
  }

  private generateMockConcept(audienceData: DemographicSelectionData): Concept {
    // Fallback mock concept generation
    const categories = [
      'Brand Awareness',
      'Product Launch',
      'Seasonal Campaign',
      'Social Media',
      'Email Marketing',
      'Content Marketing',
      'Influencer Partnership',
      'Health & Wellness',
      'Tech Innovation',
      'Educational Content',
      'Interest-Based Marketing',
      'Professional Development',
    ];

    const category = categories[Math.floor(Math.random() * categories.length)];

    return {
      id: `concept-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      title: `AI-Generated ${category} Campaign for ${audienceData.profession}s`,
      description: `A targeted ${category.toLowerCase()} campaign designed specifically for ${audienceData.age} ${audienceData.profession}s in ${audienceData.location}. This concept leverages insights from your audience's ${audienceData.interests[0]} interests to create engaging content that resonates with your ${audienceData.income} income segment.`,
      category,
      targetAudience: this.generateTargetAudienceDescription(audienceData),
      keyMessage: `Discover how our solution can enhance your ${audienceData.profession} journey and connect with your interests in ${audienceData.interests[0]}.`,
      visualElements: [
        'Professional lifestyle imagery',
        'Clear value proposition',
        'Audience-specific messaging',
        'Compelling call-to-action',
      ],
      callToAction: 'Learn More',
      estimatedReach: Math.floor(Math.random() * 50000) + 10000,
      estimatedEngagement: Math.floor(Math.random() * 15) + 8,
      createdAt: new Date(),
    };
  }
}
